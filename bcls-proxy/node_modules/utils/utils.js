// Generated by CoffeeScript 1.3.3
(function() {
  var crypto, fs, utils;

  fs = require('fs');

  crypto = require('crypto');

  utils = {
    processObject: function(ob, handle) {
      var keys, run;
      keys = Object.keys(ob);
      if (keys.length) {
        return process.nextTick(run = function() {
          var k;
          k = keys.shift();
          handle(ob[k], k);
          if (keys.length) {
            return process.nextTick(run);
          }
        });
      }
    },
    isObject: function(ob) {
      return typeof ob === 'object' && !Array.isArray(ob) && ob !== null;
    },
    isNumber: function(n) {
      return !isNaN(parseFloat(n)) && isFinite(n);
    },
    elInOb: function(ob, e) {
      var c, el;
      c = 0;
      for (el in ob) {
        if (el === e) {
          c++;
        }
      }
      return c;
    },
    noe: function(ob) {
      return Object.keys(ob).length;
    },
    firstEl: function(ob) {
      var k;
      for (k in ob) {
        return ob[k];
      }
    },
    clone: function(ob) {
      var copy, k;
      copy = {};
      for (k in ob) {
        if (this.isObject(ob[k])) {
          copy[k] = this.clone(ob[k]);
        } else {
          copy[k] = ob[k];
        }
      }
      return copy;
    },
    randomString: function(len) {
      var chars, generated, rand;
      chars = '0123456789\
              ABCDEFGHIJKLMNOPQRSTUVWXTZ\
              abcdefghiklmnopqrstuvwxyz';
      generated = '';
      while (len--) {
        rand = Math.floor(Math.random() * chars.length);
        generated += chars[rand];
      }
      return generated;
    },
    empty: function(str) {
      return str.replace(' ', '') === '';
    },
    exportAllFrom: function(dir, skipIndex) {
      var file, files, modules, name, _i, _len;
      if (skipIndex == null) {
        skipIndex = true;
      }
      files = fs.readdirSync(dir);
      if (skipIndex) {
        delete files[files.indexOf('index')];
      }
      modules = {};
      for (_i = 0, _len = files.length; _i < _len; _i++) {
        file = files[_i];
        name = file.split('.')[0];
        modules[name] = require(dir + '/' + name);
      }
      return modules;
    },
    md5: function(str) {
      var md5sum;
      md5sum = crypto.createHash('md5');
      md5sum.update(str);
      return md5sum.digest('hex');
    },
    hash: function(str, salt, i) {
      var hash;
      if (i == null) {
        i = 10;
      }
      if (salt == null) {
        salt = this.md5(str);
      }
      hash = this.md5(salt + str);
      while (i--) {
        hash = this.md5(hash);
      }
      return hash;
    }
  };

  module.exports = utils;

}).call(this);
