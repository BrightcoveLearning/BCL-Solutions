{
  "apiVersion": "1",
  "swaggerVersion": "1.2",
  "basePath": "https://data.brightcove.com/analytics-api/videocloud",
  "resourcePath": "/account",
  "apis": [
    {
      "path": "/account",
      "description": "Account rollup",
      "operations": [
        {
          "httpMethod": "GET",
          "summary": "Get a summary rollup for the account",
          "notes": "Returns a rollup based on the account ID",
          "responseClass": "account",
          "nickname": "getrollup",
          "parameters": [
            {
              "allowableValues": {
                "values": [
                  "active_media",
                  "bytes_in",
                  "bytes_out",
                  "bytes_overhead",
                  "bytes_stored",
                  "bytes_player",
                  "player_load",
                  "video_impression",
                  "video_view",
                  "video_engagement",
                  "video_percent_viewed",
                  "String"
                ],
                "valueType": "LIST"
              },
              "allowMultiple": false,
              "dataType": "interger",
              "required": false,
              "paramType": "query",
              "description": "The metric to sort the results by ",
              "name": "sort"
            },
            {
              "allowableValues": {
                "min": 0,
                "valueType": "RANGE"
              },
              "allowMultiple": false,
              "dataType": "interger",
              "required": false,
              "paramType": "query",
              "description": "The number of results to skip",
              "name": "offset"
            },
            {
              "allowableValues": {
                "min": 1,
                "valueType": "RANGE"
              },
              "allowMultiple": false,
              "dataType": "interger",
              "required": false,
              "paramType": "query",
              "description": "start of the range in which to return data",
              "name": "limit"
            },
            {
              "format": "utc-millisec || alltime",
              "allowMultiple": false,
              "dataType": "String",
              "required": false,
              "paramType": "query",
              "description": "start of the range in which to return data",
              "name": "from"
            },
            {
              "format": "utc-millisec || now",
              "allowMultiple": false,
              "dataType": "integer",
              "required": false,
              "paramType": "query",
              "description": "end of the range in which to return data",
              "name": "to"
            },
            {
              "name": "accountId",
              "description": "ID of account that needs to be fetched",
              "paramType": "path",
              "required": true,
              "allowMultiple": false,
              "dataType": "string"
            }
          ],
          "errorResponses": [
            {
              "code": 400,
              "reason": "Invalid ID supplied"
            },
            {
              "code": 404,
              "reason": "account not found"
            }
          ]
        }
      ]
    }
  ],
  "models": {
    "Category": {
      "id": "Category",
      "properties": {
        "id": {
          "type": "long"
        },
        "name": {
          "type": "string"
        }
      }
    },
    "account": {
      "id": "account",
      "properties": {
        "tags": {
          "items": {
            "$ref": "Tag"
          },
          "type": "Array"
        },
        "id": {
          "type": "long"
        },
        "category": {
          "type": "Category"
        },
        "status": {
          "allowableValues": {
            "valueType": "LIST",
            "values": [
              "available",
              "pending",
              "sold"
            ],
            "valueType": "LIST"
          },
          "description": "account status in the store",
          "type": "string"
        },
        "name": {
          "type": "string"
        },
        "photoUrls": {
          "items": {
            "type": "string"
          },
          "type": "Array"
        }
      }
    },
    "Tag": {
      "id": "Tag",
      "properties": {
        "id": {
          "type": "long"
        },
        "name": {
          "type": "string"
        }
      }
    }
  }
}